#include "agent.h"
#include "environment.h"
#include <iostream>
#include <cstdlib>
#include <vector>
#include <utility>

using namespace std;
// -----------------------------------------------------------
Agent::ActionType Agent::Think()
{
    switch(ult_accion_){
        case actFORWARD:
                if(bump_){
                    obstaculo_[orientacion_]=true;
                    mapa[fila][columna]=0;
                }
                else{
                    for(int i=0;i<4;i++)
                        obstaculo_[i]=false;
                    mapa[fila][columna]=1;
                }
                break;
        case actTURN_R:
            orientacion_++;
            if(orientacion_>3)
                orientacion_=0;
            break;
        case actTURN_L:
            orientacion_--;
            if(orientacion_<0)
                orientacion_=3;
            break;
    }
    ActionType accion;
	if(trufa_size_>0){
        accion=actEXTRACT;
	}
	else if(trufa_size_==-1){
        accion=actSNIFF;
	}
    else if(!obstaculo_[orientacion_]){
        if(orientacion_==0){
            fila=fila+1;
        }
        else if(orientacion_==1){
            columna=columna+1;
        }
        else if(orientacion_==2){
            fila=fila-1;
        }
        else{
            columna=columna-1;
        }
        accion=actFORWARD;
    }
    else if(!obstaculo_[(orientacion_+1)%4]){
        accion=actTURN_R;
    }
    else
        accion=actTURN_L;
    for(int i=0;i<40;i++){
	for(int j=0;j<40;j++){
		cout<<mapa[i][j]<<" ";
	}
	cout<<endl;
    }
    ult_accion_=accion;
	return accion;
}
// -----------------------------------------------------------
void Agent::Perceive(const Environment &env)
{
	trufa_size_ = env.TrufaAmount();
	bump_ = env.isJustBump();
}
// -----------------------------------------------------------
string ActionStr(Agent::ActionType accion)
{
	switch (accion)
	{
	case Agent::actFORWARD: return "FORWARD";
	case Agent::actTURN_L: return "TURN LEFT";
	case Agent::actTURN_R: return "TURN RIGHT";
	case Agent::actSNIFF: return "SNIFF";
	case Agent::actEXTRACT: return "EXTRACT";
	case Agent::actIDLE: return "IDLE";
	default: return "???";
	}
}
